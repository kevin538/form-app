{"version":3,"sources":["components/FormContainer.js","components/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["FormContainer","className","type","name","value","this","props","data","firstName","onChange","handeleOnchange","lastName","country","checked","gender","message","isConfirm","class","Component","FormComponent","event","target","setState","state","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAuFeA,E,iLAnFP,OACA,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACf,yBAAKA,UAAU,UACX,8CAEJ,yBAAKA,UAAU,UACX,2BAAQC,KAAK,OAAOC,KAAK,YAAYC,MAAOC,KAAKC,MAAMC,KAAKC,UAAWC,SAAUJ,KAAKC,MAAMI,oBAGhG,yBAAKT,UAAU,OACf,yBAAKA,UAAU,UACX,6CAEJ,yBAAKA,UAAU,UACX,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,MAAOC,KAAKC,MAAMC,KAAKI,SAAUF,SAAUJ,KAAKC,MAAMI,oBAG7F,yBAAKT,UAAU,OACf,yBAAKA,UAAU,UACX,iCAEJ,yBAAKA,UAAU,UACX,4BAASE,KAAK,UAAUM,SAAUJ,KAAKC,MAAMI,gBAAiBN,MAAOC,KAAKC,MAAMC,KAAKK,SACrF,4BAAQR,MAAM,aAAd,aACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,UAIJ,yBAAKH,UAAU,OACf,yBAAKA,UAAU,UACX,0CAEJ,yBAAKA,UAAU,UACX,2BAAOA,UAAU,aACT,2BACIC,KAAK,QACLC,KAAK,SACLC,MAAM,OACNS,QAAoC,SAA3BR,KAAKC,MAAMC,KAAKO,OACzBL,SAAUJ,KAAKC,MAAMI,kBANjC,WASI,2BAAOT,UAAU,aACb,2BACIC,KAAK,QACLC,KAAK,SACLC,MAAM,SACNS,QAAoC,WAA3BR,KAAKC,MAAMC,KAAKO,OACzBL,SAAUJ,KAAKC,MAAMI,kBAN7B,aAWR,yBAAKT,UAAU,OACf,yBAAKA,UAAU,UACX,2CAEJ,yBAAKA,UAAU,UACX,8BAAUQ,SAAUJ,KAAKC,MAAMI,gBAAiBN,MAAOC,KAAKC,MAAMC,KAAKQ,QAAUZ,KAAK,cAG1F,yBAAKF,UAAU,OACf,yBAAKA,UAAU,UACX,2CAEJ,yBAAKA,UAAU,UACX,2BAAOA,UAAU,aACjB,2BAAOC,KAAK,WAAWW,QAASR,KAAKC,MAAMC,KAAKS,UAAWb,KAAK,YAAYM,SAAUJ,KAAKC,MAAMI,kBACjG,0BAAMO,MAAM,iBAIhB,yBAAKhB,UAAU,OACf,2BAAOC,KAAK,SAASE,MAAM,iB,GA7EVc,aC4BdC,E,YA1BX,aAAc,IAAD,8BACT,+CAYFT,gBAAkB,SAACU,GAAU,IAAD,EACQA,EAAMC,OAAjClB,EADmB,EACnBA,KAAKC,EADc,EACdA,MAAMF,EADQ,EACRA,KAAKW,EADG,EACHA,QACf,aAARX,EAAqB,EAAKoB,SAAL,eAAgBnB,EAAQU,IAAY,EAAKS,SAAL,eAAgBnB,EAAQC,KAbjF,EAAKmB,MAAO,CACVf,UAAW,GACXG,SAAS,GACTC,QAAS,MACTG,QAAS,GACTD,OAAO,GACPE,WAAY,GAEd,EAAKN,gBAAkB,EAAKA,gBAAgBc,KAArB,gBAVd,E,sEAkBT,OACI,6BACI,kBAAC,EAAD,CAAgBd,gBAAiBL,KAAKK,gBAAiBH,KAAMF,KAAKkB,a,GArBrDL,aCCRO,E,iLAIjB,OACE,6BACE,kBAAC,EAAD,W,GANyBP,aCQbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2484819.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n class FormContainer extends Component {\r\n    render() {\r\n        return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n            <div className=\"col-25\">\r\n                <label>First Name</label>\r\n            </div>\r\n            <div className=\"col-75\">\r\n                <input  type=\"text\" name=\"firstName\" value={this.props.data.firstName} onChange={this.props.handeleOnchange}></input>\r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-25\">\r\n                <label>Last Name</label>\r\n            </div>\r\n            <div className=\"col-75\">\r\n                <input type=\"text\" name=\"lastName\" value={this.props.data.lastName} onChange={this.props.handeleOnchange}></input>\r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-25\">\r\n                <label></label>\r\n            </div>\r\n            <div className=\"col-75\">\r\n                <select  name=\"country\" onChange={this.props.handeleOnchange} value={this.props.data.country}>\r\n                <option value=\"australia\">Australia</option>\r\n                <option value=\"canada\">Canada</option>\r\n                <option value=\"usa\">USA</option>\r\n                </select>\r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-25\">\r\n                <label>Gender</label>\r\n            </div>\r\n            <div className=\"col-75\">\r\n                <label className=\"container\">\r\n                        <input \r\n                            type=\"radio\" \r\n                            name=\"gender\"\r\n                            value=\"male\"\r\n                            checked={this.props.data.gender === \"male\"}\r\n                            onChange={this.props.handeleOnchange}\r\n                        /> Female\r\n                    </label>\r\n                    <label className=\"container\">\r\n                        <input \r\n                            type=\"radio\" \r\n                            name=\"gender\"\r\n                            value=\"female\"\r\n                            checked={this.props.data.gender === \"female\"}\r\n                            onChange={this.props.handeleOnchange}\r\n                        /> Female\r\n                    </label>\r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-25\">\r\n                <label>Message</label>\r\n            </div>\r\n            <div className=\"col-75\">\r\n                <textarea onChange={this.props.handeleOnchange} value={this.props.data.message}  name=\"message\"/> \r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-25\">\r\n                <label>Confirm</label>\r\n            </div>\r\n            <div className=\"col-75\">\r\n                <label className=\"container\">\r\n                <input type=\"checkbox\" checked={this.props.data.isConfirm} name=\"isConfirm\" onChange={this.props.handeleOnchange}/>\r\n                <span class=\"checkmark\"></span>\r\n                </label>\r\n            </div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <input type=\"submit\" value=\"Submit\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    }\r\n}\r\n\r\nexport default FormContainer","import React, { Component } from 'react'\r\nimport FormContainer from './FormContainer'\r\n\r\n class FormComponent extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n          firstName :\"\",\r\n          lastName:\"\",\r\n          country :\"usa\",\r\n          message :\"\",\r\n          gender:\"\",\r\n          isConfirm : false\r\n        }\r\n        this.handeleOnchange = this.handeleOnchange.bind(this)\r\n    \r\n      }\r\n      handeleOnchange = (event) =>{\r\n        const {name,value,type,checked} = event.target\r\n        type ===\"checkbox\" ? this.setState({[name] : checked}) : this.setState({[name] : value});\r\n      }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormContainer  handeleOnchange={this.handeleOnchange} data={this.state}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormComponent","import React, { Component } from 'react'\nimport './App.css';\nimport FormComponent from './components/FormComponent'\n\nexport default class App extends Component {\n \n\n  render() {\n    return (\n      <div>\n        <FormComponent />  \n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}